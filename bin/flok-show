#!/usr/bin/env node

var program = require('commander');
var Table = require('cli-table');
var colors = require('colors');
// var get = require('mout/object/get');  //https://github.com/mout/mout/issues/125
var filter = require('mout/array/filter');
var pluck = require('mout/array/pluck');
var unCamelCase = require('mout/string/unCamelCase');
var properCase = require('mout/string/properCase');
var forOwn = require('mout/object/forOwn');

//TODO: this is only working for the headers, not the status column
if (!process.stdout.isTTY) colors.mode = 'none';

var keyTitleMap = {
  'status.signature': 'Run Signature',
  'status.error.message': 'Error Message'
};

// options specific to flok-show
program
  .usage('[options] [all|pending|blocked|done|changed]')
  .option('-c, --compact', 'compact table layout')
  .option('-s, --no-shrink', 'always display table at max width of data')
  .option('-C, --count', 'count migrations instead of print details');

//TODO: limit table rows
//TODO: sort options

// setup flok specific options on program and get back a flok instance
var flok = require('./flok').my(program);

var what = (program.args.pop() || 'all').toLowerCase();
function title(name) {
  return keyTitleMap[name] || properCase(unCamelCase(name.substr(name.indexOf('.') + 1)));
}

function underline(s) {
  return new Array(s.length + 1).join('=');
}

function formatDate(d) {
  if (!d) return '';
  if (!(d instanceof Date)) d = new Date(d);
  function pad(n) { return n < 10 ? '0' + n : n; }
  return d.getUTCFullYear() + '-' +
    pad(d.getUTCMonth() + 1) + '-' +
    pad(d.getUTCDate()) + ' ' +
    pad(d.getUTCHours()) + ':' +
    pad(d.getUTCMinutes()) + ':' +
    pad(d.getUTCSeconds()) + ' UTC';
}

function info(m) {
  console.log();
  console.log(m.title.white);
  console.log(underline(m.title).white);
  console.log('State:'.cyan, m.state);
  console.log('ID:'.cyan, m.id);
  console.log('Created:'.cyan, formatDate(m.time));
  console.log('Signature:'.cyan, m.signature);
  console.log('Filename:'.cyan, m.filename);
  console.log();
  console.log('Status'.white);
  console.log('------'.white);
  console.log('Method:'.cyan, m.status.method);
  console.log('Run Signature:'.cyan, m.status.signature);
  console.log('Run Time:'.cyan, m.status.runTime);
  console.log();
  if (m.status.error) {
    console.log('Error'.white);
    console.log('-----'.white);
    console.log('Message:'.cyan, m.status.error.message);
    forOwn(m.status.error, function (v, k) {
      if (k === 'message' || k === '_stack' || k === 'stack') return;
      console.log(k.cyan + ': '.cyan + v);
    });
    console.log();
    console.log('Error Stack'.white);
    console.log('-----------'.white);
    console.log(m.status.error.stack);
  }
  console.log();
  process.exit(0);
}

function add(a, b) {
  return a + b;
}

/**
 * take an array of column widths and if the sum is larger than the terminal width then shrink the
 * largest column by 1.  repeats until the sum is less than the terminal width
 *
 * compensates for width of borders but assumes 1 char and no padding, send second argument to
 * adjust padding manually.
 */
function shrink(a, padding) {
  if (a.reduce(add, 0) > (padding || (process.stdout.columns - a.length - 1))) {
    var largest = 0;
    for (var i = 0; i < a.length; i++) {
      if (a[i] > a[largest]) {
        largest = i;
      }
    }
    a[largest]--;
    shrink(a);
  }
}

// modified from mout/object/get to not throw when something mid-namespace is `null`
// https://github.com/mout/mout/issues/125
function get(obj, prop) {
  /*jshint boss:true*/
  var parts = prop.split('.'),
      last = parts.pop();

  while (prop = parts.shift()) {
    obj = obj[prop];
    if (typeof obj !== 'object' || obj === null) return;
  }

  return obj[last];
}

function rowOf(m, fields) {
  var row = [];

  var color = m.isProblem ? 'red' :
              m.isPending ? 'white' :
              m.isDone    ? 'grey' :
                            'yellow';

  fields.forEach(function (f) {
    // TODO: get table to display row colors properly without messing up width
    // var v = (get(m, f) || '').toString()[color];
    var v = (get(m, f) || '').toString();
    if (f === 'state') v = v[color];

    // format dates
    if (f === 'status.runTime' || f === 'time') v = formatDate(v);

    row.push(v);
  });
  return row;
}

function allMigrations() {
  var m = flok.migrations.slice(0);
  m.sort(function (a, b) {
    return a.status.runTime - b.status.runTime;
    //TODO: add secondary sorting by .time DESC
  });
  return m;
}

function pendingMigrations() {
  return filter(allMigrations(), 'isPending');
}

function blockedMigrations() {
  return filter(allMigrations(), 'isProblem');
}

function doneMigrations() {
  return filter(allMigrations(), 'isDone');
}

function changedMigrations() {
  return filter(allMigrations(), 'isChanged');
}

// what are we viewing
var what = (program.args.pop() || 'all').toLowerCase();

// load migrations then display
flok.load(function (err) {
  if (err) {
    console.error('ERROR loading migrations:', err.message);
    return process.exit(1);
  }

  // filter and sort migrations depending on task
  var migrations =
    what === 'all'     ? allMigrations() :
    what === 'pending' ? pendingMigrations() :
    what === 'blocked' ? blockedMigrations() :
    what === 'done'    ? doneMigrations() :
    what === 'changed' ? changedMigrations() :
    false;

  // user didn't want a list of migrations, maybe a single migration?
  if (migrations === false) {
    migrations = allMigrations();
    var m = filter(migrations, {id: what});
    if (m && m[0]) {
      return info(m[0]);
    } else {
      console.error('ERROR: unknown command (' +
                    what +
                    '): all, pending, blocked, done, changed, <id>');
      return process.exit(1);
    }
  }

  // just want a count of migrations
  if (program.count) {
    console.log(migrations.length);
    process.exit(0);
  }

  // set view columns
  var columns = {
    //(status.runTime ASC, time DESC)
    all: ['state', 'id', 'title', 'status.runMethod', 'status.runTime'],
    //(time DESC)
    pending: ['id', 'title', 'isErrored', 'isChanged'],
    //(status.runTime ASC)
    blocked: ['id', 'title', 'status.runMethod', 'isChanged', 'status.error.message'],
    //(status.runTime ASC)
    done: ['id', 'title', 'status.runTime'],
    //(status.runTime ASC)
    changed: ['id', 'title', 'signature', 'status.signature', 'status.runTime']
  };

  // if (migrations.length === 0) {
  //   console.log('no migrations found by filtering by %s', what);
  //   return process.exit(0);
  // }

  //TODO: option to customise headers (or display all)

  // headers from column names
  var headers = columns[what].map(function (col) {
    return title(col);
  });

  // start col widths tracking with width of headers
  var widest = pluck(headers, 'length');

  // get rows of data for the table & calculate largest colWidths
  var rows = [];
  migrations.forEach(function (m) {
    var r = rowOf(m, columns[what]);
    for (var i = 0; i < r.length; i++) {
      widest[i] = Math.max(r[i].length, widest[i] || 0);
    }
    rows.push(r);
  });

  // auto shrink columns if wider than tty
  if (program.shrink) shrink(widest);

  // setup table
  var table = new Table({
    head: headers,
    colWidths: widest,
    style: {
      compact: program.compact,
      border: ['grey'],  // in hoping that cli-table master will eventually be tagged and published
      head: ['bold']
    }
  });

  // load rows into the table
  for (var i = 0; i < rows.length; i++) {
    table.push(rows[i]);
  }

  // display the table
  console.log(table.toString());

  //TODO: emit done/end or similar on flok so db connections can be closed properly?
  process.exit(0);

});